#!/usr/bin/env node

/**
 * Script pour cr√©er des ressources de d√©monstration
 * Utilise directement les mod√®les et services backend
 */

const RessourcesService = require('../services/ressources');
const AuthModel = require('../models/auth');
const logger = require('../utils/logger');

async function createDemoResources() {
    try {
        console.log('üöÄ Cr√©ation des ressources de d√©monstration...');

        // 1. Cr√©er ou r√©cup√©rer un utilisateur de test
        let testUser;
        try {
            // Essayer de trouver un utilisateur existant
            const usersResult = await AuthModel.getAllUsers();
            const existingUsers = usersResult.users || [];
            testUser = existingUsers.find(user => user.role === 'professeur');
            
            if (!testUser) {
                console.log('‚ùå Aucun utilisateur professeur trouv√©. Veuillez d\'abord cr√©er un compte professeur via l\'interface.');
                process.exit(1);
            }
            
            console.log(`‚úÖ Utilisateur trouv√©: ${testUser.nom} ${testUser.prenom} (${testUser.role})`);
        } catch (error) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration des utilisateurs:', error);
            process.exit(1);
        }

        // 2. Ressources de d√©monstration √† cr√©er (tous types de consultation)
        const demoResources = [
            // Vid√©o YouTube pour test lecteur int√©gr√©
            {
                titre: 'Cours de Physique - Les forces et mouvements',
                description: 'Vid√©o YouTube explicative sur les concepts de forces et mouvements en physique niveau 3√®me. Parfaite pour comprendre les bases de la m√©canique.',
                type: 'lien',
                matiere: 'Physique',
                niveau: '3√®me',
                tags: ['physique', 'forces', 'mouvements'],
                contenu: {
                    url: 'https://www.youtube.com/watch?v=JhHMJCUmq28',
                    description: 'Vid√©o de 12 minutes avec animations et exemples concrets'
                },
                is_public: true
            },
            // Document PDF pour test lecteur PDF
            {
                titre: 'Guide Math√©matiques - Fonctions et graphiques',
                description: 'Document PDF complet sur les fonctions math√©matiques avec graphiques, exemples et exercices corrig√©s pour le niveau 2nde.',
                type: 'document',
                matiere: 'Math√©matiques', 
                niveau: '2nde',
                tags: ['fonctions', 'graphiques', 'math√©matiques'],
                contenu: {
                    file_url: 'https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf',
                    file_name: 'guide-fonctions.pdf',
                    file_type: 'application/pdf',
                    description: 'PDF de 18 pages avec exercices progressifs'
                },
                is_public: true
            },
            // Image pour test visionneuse
            {
                titre: 'Carte g√©ologique de la France',
                description: 'Carte d√©taill√©e de la g√©ologie fran√ßaise montrant les diff√©rentes formations rocheuses et leur r√©partition sur le territoire.',
                type: 'media',
                matiere: 'Sciences de la Terre',
                niveau: '1√®re',
                tags: ['g√©ologie', 'france', 'roches'],
                contenu: {
                    file_url: 'https://upload.wikimedia.org/wikipedia/commons/thumb/8/89/France_geology_map-fr.svg/800px-France_geology_map-fr.svg.png',
                    file_name: 'carte-geologique-france.png',
                    file_type: 'image/png',
                    description: 'Carte haute r√©solution avec l√©gende d√©taill√©e'
                },
                is_public: true
            },
            // Lien externe pour test ouverture
            {
                titre: 'Mus√©e virtuel - Louvre Collections',
                description: 'Visite virtuelle interactive des collections du mus√©e du Louvre avec zoom haute d√©finition sur les ≈ìuvres majeures.',
                type: 'lien',
                matiere: 'Arts',
                niveau: 'Tous niveaux',
                tags: ['mus√©e', 'art', 'virtuel'],
                contenu: {
                    url: 'https://www.louvre.fr/en/online-tours',
                    description: 'Visite interactive avec ≈ìuvres en tr√®s haute r√©solution'
                },
                is_public: true
            },
            // Document Word pour test Google Docs Viewer
            {
                titre: 'Analyse litt√©raire - Le Petit Prince',
                description: 'Document Word d√©taillant l\'analyse compl√®te de l\'≈ìuvre d\'Antoine de Saint-Exup√©ry avec th√®mes, symboles et interpr√©tation.',
                type: 'document',
                matiere: 'Fran√ßais',
                niveau: '6√®me',
                tags: ['litt√©rature', 'saint-exup√©ry', 'analyse'],
                contenu: {
                    file_url: 'https://file-examples.com/storage/fe6e1b7b8fd0ffeffa4bb68/2017/10/file_example_DOC_100kB.doc',
                    file_name: 'analyse-petit-prince.doc',
                    file_type: 'application/msword',
                    description: 'Document Word de 8 pages avec citations et r√©f√©rences'
                },
                is_public: true
            },
            // Fichier texte pour test lecteur texte
            {
                titre: 'Vocabulaire Anglais - Th√®me voyage',
                description: 'Liste compl√®te du vocabulaire anglais sur le th√®me du voyage avec traductions fran√ßaises et phrases d\'exemple.',
                type: 'document', 
                matiere: 'Anglais',
                niveau: '4√®me',
                tags: ['vocabulaire', 'anglais', 'voyage'],
                contenu: {
                    file_url: 'https://www.learnenglish.de/basics/travel.txt',
                    file_name: 'vocabulaire-voyage.txt',
                    file_type: 'text/plain',
                    description: 'Fichier texte avec 150+ mots class√©s par cat√©gorie'
                },
                is_public: true
            }
        ];

        // 3. Cr√©er les ressources une par une
        let createdCount = 0;
        for (const resourceData of demoResources) {
            try {
                const result = await RessourcesService.createRessource(
                    resourceData,
                    null, // pas de fichier
                    testUser.id
                );
                
                if (result.success) {
                    console.log(`‚úÖ Ressource cr√©√©e: "${result.ressource.titre}"`);
                    createdCount++;
                } else {
                    console.log(`‚ùå √âchec cr√©ation: "${resourceData.titre}"`);
                }
            } catch (error) {
                console.error(`‚ùå Erreur cr√©ation "${resourceData.titre}":`, error.message);
            }
        }

        console.log(`\nüéâ ${createdCount}/${demoResources.length} ressources cr√©√©es avec succ√®s!`);
        
        if (createdCount > 0) {
            console.log('\nüìö Les ressources sont maintenant disponibles dans l\'interface.');
            console.log('üîó Rendez-vous sur http://localhost:3000/#resources pour les voir.');
            console.log('\nüéØ Types de consultation testables :');
            console.log('   üé• YouTube - Lecteur vid√©o int√©gr√© dans la modal');
            console.log('   üìÑ PDF - Lecteur PDF avec contr√¥les de taille');
            console.log('   üñºÔ∏è Image - Visionneuse avec zoom plein √©cran');
            console.log('   üîó Lien externe - Ouverture directe dans nouvel onglet');
            console.log('   üìù Word - Google Docs Viewer int√©gr√©');
            console.log('   üìÑ Texte - Lecteur de contenu avec scroll');
            console.log('\nüí° Cliquez sur une ressource pour ouvrir la modal de consultation !');
        }

    } catch (error) {
        console.error('‚ùå Erreur g√©n√©rale:', error);
        process.exit(1);
    }
}

// Ex√©cuter le script
if (require.main === module) {
    createDemoResources()
        .then(() => {
            console.log('\n‚úÖ Script termin√© avec succ√®s');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå Erreur fatale:', error);
            process.exit(1);
        });
}

module.exports = { createDemoResources };
